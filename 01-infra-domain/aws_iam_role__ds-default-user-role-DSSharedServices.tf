#Â File generated by aws2tf see https://github.com/aws-samples/aws2tf
# aws_iam_role.ds-default-user-role-DSSharedServices:
resource "aws_iam_role" "ds-default-user-role-DSSharedServices" {
  assume_role_policy = jsonencode(
    {
      Statement = [
        {
          Action = "sts:AssumeRole"
          Effect = "Allow"
          Principal = {
            AWS = format("arn:aws:iam::%s:root",data.aws_caller_identity.current.account_id)
          }
        },
        {
          Action = "sts:AssumeRole"
          Effect = "Allow"
          Principal = {
            Service = "sagemaker.amazonaws.com"
          }
          Sid = "SageMakerTrustRelantionship"
        },
      ]
      Version = "2012-10-17"
    }
  )
  force_detach_policies = false
  managed_policy_arns = [
    "arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess",
    "arn:aws:iam::aws:policy/AWSCodeArtifactReadOnlyAccess",
    "arn:aws:iam::aws:policy/AWSCodeCommitReadOnly",
    "arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess",
    "arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess",
    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
    "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess",
    "arn:aws:iam::aws:policy/AmazonSageMakerReadOnly",
  ]
  max_session_duration = 3600
  name                 = "ds-default-user-role-DSSharedServices"
  path                 = "/"
  tags = {
    "StackSetName"     = "DSSharedServices"
    "StudioDomainName" = "ds-studio-domain"
  }
  tags_all = {
    "StackSetName"     = "DSSharedServices"
    "StudioDomainName" = "ds-studio-domain"
  }

  inline_policy {
    name = "SageMakerAccessInlinePolicy"
    policy = jsonencode(
      {
        Statement = [
          {
            Action = [
              "sagemaker:UpdateCodeRepository",
              "sagemaker:DeleteCodeRepository",
              "sagemaker:CreateCodeRepository",
              "sagemaker:StartNotebookInstance",
              "sagemaker:StopNotebookInstance",
              "sagemaker:CreateApp",
              "sagemaker:AddTags",
              "sagemaker:DeleteApp",
              "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
              "codecommit:BatchGetRepositories",
              "codecommit:GitPull",
              "codecommit:GitPush",
              "codecommit:CreateBranch",
              "codecommit:DeleteBranch",
              "codecommit:GetBranch",
              "codecommit:ListBranches",
              "codecommit:CreatePullRequest",
              "codecommit:CreatePullRequestApproval",
              "codecommit:GetPullRequest",
              "codecommit:CreateCommit",
              "codecommit:GetCommit",
              "codecommit:GetCommitHistory",
              "codecommit:GetDifferences",
              "codecommit:GetReferences",
              "codecommit:CreateRepository",
              "codecommit:GetRepository",
              "codecommit:ListRepositories",
              "iam:TagRole",
              "kms:CreateGrant",
              "kms:DescribeKey",
              "servicecatalog:ListAcceptedPortfolioShares",
            ]
            Effect   = "Allow"
            Resource = "*"
            Sid      = "DataScientistAdditionalPolicies"
          },
          {
            Action = [
              "iam:PassRole",
            ]
            Condition = {
              StringEquals = {
                "iam:PassedToService" = [
                  "sagemaker.amazonaws.com",
                ]
              }
            }
            Effect   = "Allow"
            Resource = "*"
            Sid      = "SageMakerIamPassRole"
          },
        ]
        Version = "2012-10-17"
      }
    )
  }
}
